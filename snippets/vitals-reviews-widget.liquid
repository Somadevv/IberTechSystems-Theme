{%- comment -%}
  Vitals Reviews Widget Snippet
  This snippet creates a container for Vitals third-party app reviews
  with proper integration for the Vitals app to inject content.
  
  Parameters:
  - product: Required. The product object for which to show reviews
{%- endcomment -%}

{%- if product -%}
  {%- comment -%} Vitals Reviews Container {%- endcomment -%}
  <div class="vitals-reviews-container" data-product-id="{{ product.id }}">
    
    {%- comment -%} Primary Vitals Reviews Widget Container {%- endcomment -%}
    <div 
      id="vitals-reviews-{{ product.id }}"
      class="vitals-reviews-widget" 
      data-vitals-reviews
      data-vitals-product-id="{{ product.id }}"
      data-product-id="{{ product.id }}"
      data-product-handle="{{ product.handle }}"
    >
      {%- comment -%} This is where Vitals will inject the reviews widget {%- endcomment -%}
    </div>
    
    {%- comment -%} 
      Alternative container for Write Review functionality 
      Some Vitals configurations look for specific containers
    {%- endcomment -%}
    <div 
      id="vitals-write-review-{{ product.id }}"
      class="vitals-write-review-widget"
      data-vitals-write-review
      data-product-id="{{ product.id }}"
      data-product-handle="{{ product.handle }}"
    >
      {%- comment -%} Vitals write review widget will render here {%- endcomment -%}
    </div>
    
    {%- comment -%} Fallback content with Leave a Review button {%- endcomment -%}
    <div class="vitals-reviews-fallback" style="padding: 2rem; text-align: center; background: #f8f9fa; border-radius: 8px; border: 1px solid #e9ecef;">
      <div class="reviews-header" style="margin-bottom: 2rem;">
        <h4 style="margin-bottom: 0.5rem; color: #333; font-size: 1.25rem;">Customer Reviews</h4>
        <p style="color: #666; margin: 0;">Share your experience with this product</p>
      </div>
      
      {%- comment -%} Leave a Review Button {%- endcomment -%}
      <div class="leave-review-section">
        <button 
          type="button" 
          class="leave-review-btn vitals-review-trigger"
          data-product-id="{{ product.id }}"
          data-product-handle="{{ product.handle }}"
          style="
            background: #5534eb; 
            color: white; 
            border: none; 
            padding: 10px 20px; 
            cursor: pointer; 
            font-size: 16px; 
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            transition: background-color 0.3s ease;
            box-shadow: 0 2px 4px rgba(85,52,235,0.2);
          "
          onclick="triggerVitalsReview({{ product.id }}, '{{ product.handle }}')"
          onmouseover="this.style.backgroundColor='#4a2bc7'"
          onmouseout="this.style.backgroundColor='#5534eb'"
        >
          ✍️ Leave a Review
        </button>
      </div>
    </div>
    
    {%- comment -%} No JavaScript fallback {%- endcomment -%}
    <noscript>
      <div class="vitals-reviews-noscript" style="padding: 2rem; text-align: center; background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px;">
        <h4 style="color: #856404; margin-bottom: 0.5rem;">JavaScript Required</h4>
        <p style="color: #856404; margin: 0;">Please enable JavaScript to view reviews and leave feedback for this product.</p>
      </div>
    </noscript>
  </div>
  
  {%- comment -%} Vitals Integration JavaScript {%- endcomment -%}
  <script>
    function triggerVitalsReview(productId, productHandle) {
      console.log('=== VITALS REVIEW TRIGGER v3.0 ===');
      console.log('Attempting to trigger Vitals review for product:', productId);
      
      // IMMEDIATE: Log VITALS.states structure first
      if (window.VITALS && window.VITALS.states) {
        console.log('VITALS.states immediate inspection:');
        console.log('- VITALS.states keys:', Object.keys(window.VITALS.states));
        console.log('- VITALS.states full object:', window.VITALS.states);
        
        // Log each state's structure
        Object.keys(window.VITALS.states).forEach(function(key) {
          var state = window.VITALS.states[key];
          console.log('- VITALS.states.' + key + ':', typeof state === 'object' ? Object.keys(state) : state);
        });
      }
      
      // Method 1: Look for Vitals-generated review elements on the page
      console.log('=== DOM SEARCH FOR VITALS ELEMENTS ===');
      
      // Search for ALL elements with 'vitals' in their id or class
      var allVitalsElements = document.querySelectorAll('[id*="vitals"], [class*="vitals"]');
      console.log('Total Vitals elements found:', allVitalsElements.length);
      
      for (var i = 0; i < allVitalsElements.length; i++) {
        var elem = allVitalsElements[i];
        console.log('Vitals element ' + i + ':', {
          id: elem.id,
          className: elem.className,
          tagName: elem.tagName,
          textContent: elem.textContent.substring(0, 100),
          hasOnClick: !!elem.onclick,
          hasDataAttrs: Array.from(elem.attributes).filter(attr => attr.name.startsWith('data-')).map(attr => attr.name)
        });
      }
      
      // First, look for the existing Vitals reviews carousel
      var carouselSelectors = ['[id*="vitals"][id*="reviews"]', '[class*="vitals"][class*="carousel"]', '[data-vitals-reviews]'];
      var vitalsCarousel = null;
      
      for (var cs = 0; cs < carouselSelectors.length; cs++) {
        vitalsCarousel = document.querySelector(carouselSelectors[cs]);
        if (vitalsCarousel) {
          console.log('Found Vitals carousel with selector "' + carouselSelectors[cs] + '":', vitalsCarousel);
          break;
        }
      }
      
      if (vitalsCarousel) {
        // Look for any clickable elements within the carousel
        var carouselButtons = vitalsCarousel.querySelectorAll('button, a, [role="button"], [onclick], [data-action]');
        console.log('Interactive elements in carousel:', carouselButtons.length);
        
        for (var j = 0; j < carouselButtons.length; j++) {
          var carouselBtn = carouselButtons[j];
          var btnText = carouselBtn.textContent.toLowerCase().trim();
          console.log('Carousel element ' + j + ':', {
            text: btnText,
            tagName: carouselBtn.tagName,
            className: carouselBtn.className,
            id: carouselBtn.id,
            onclick: carouselBtn.onclick ? 'has onclick' : 'no onclick'
          });
          
          if (btnText.includes('write') || btnText.includes('review') || btnText.includes('add') || btnText.includes('leave')) {
            console.log('FOUND REVIEW TRIGGER! Clicking:', carouselBtn);
            carouselBtn.click();
            return;
          }
        }
      } else {
        console.log('No Vitals carousel found');
      }
      
      // Look for any Vitals review buttons on the page
      var vitalsSelectors = [
        '[id*="vitals-review"], [class*="vitals-review"]',
        '[data-vitals] button, [data-vitals] a',
        '.vitals-reviews button, .vitals-reviews a',
        '[class*="vitals"] button[class*="review"]',
        '[onclick*="vitals"], [onclick*="review"]',
        'button[data-product-id="' + productId + '"][class*="review"]'
      ];
      
      for (var k = 0; k < vitalsSelectors.length; k++) {
        var elements = document.querySelectorAll(vitalsSelectors[k]);
        console.log('Found elements for selector "' + vitalsSelectors[k] + '":', elements.length);
        
        for (var l = 0; l < elements.length; l++) {
          var elem = elements[l];
          var elemText = elem.textContent.toLowerCase();
          
          // Skip our own button
          if (elem.classList.contains('leave-review-btn')) continue;
          
          console.log('Checking element:', elemText, elem);
          
          if (elemText.includes('write') || elemText.includes('review') || elemText.includes('add') || elemText.includes('leave')) {
            console.log('Found and clicking Vitals review element:', elem);
            elem.click();
            return;
          }
        }
      }
      
      // Method 2: Direct Vitals API calls - explore VITALS.states
      if (window.VITALS) {
        console.log('VITALS object found, exploring states...');
        console.log('VITALS.states:', window.VITALS.states);
        
        try {
          // Explore VITALS.states for review functionality
          if (window.VITALS.states) {
            console.log('VITALS.states structure:', Object.keys(window.VITALS.states));
            
            // Look for reviews in states
            if (window.VITALS.states.reviews) {
              console.log('VITALS.states.reviews found:', Object.keys(window.VITALS.states.reviews));
              
              if (typeof window.VITALS.states.reviews.openModal === 'function') {
                window.VITALS.states.reviews.openModal(productId);
                console.log('Triggered via VITALS.states.reviews.openModal');
                return;
              }
              if (typeof window.VITALS.states.reviews.showWriteForm === 'function') {
                window.VITALS.states.reviews.showWriteForm(productId);
                console.log('Triggered via VITALS.states.reviews.showWriteForm');
                return;
              }
            }
            
            // Check each state for potential review functions
            Object.keys(window.VITALS.states).forEach(function(stateKey) {
              var state = window.VITALS.states[stateKey];
              if (state && typeof state === 'object') {
                console.log('Exploring VITALS.states.' + stateKey + ':', Object.keys(state));
                
                // Look for review-related functions
                if (typeof state.openReviewForm === 'function') {
                  state.openReviewForm(productId);
                  console.log('Triggered via VITALS.states.' + stateKey + '.openReviewForm');
                  return;
                }
                if (typeof state.showWriteReview === 'function') {
                  state.showWriteReview(productId);
                  console.log('Triggered via VITALS.states.' + stateKey + '.showWriteReview');
                  return;
                }
              }
            });
          }
          
          // Try to call VITALS.init with review parameters
          if (typeof window.VITALS.init === 'function') {
            console.log('Trying VITALS.init for reviews...');
            window.VITALS.init({ action: 'openReviewForm', productId: productId });
            return;
          }
          
        } catch (e) {
          console.log('Error exploring VITALS.states:', e);
        }
      }
      
      // Try vitalsLibrary object
      if (window.vitalsLibrary) {
        console.log('vitalsLibrary object found:', window.vitalsLibrary);
        console.log('vitalsLibrary methods available:', Object.keys(window.vitalsLibrary));
        
        try {
          if (window.vitalsLibrary.reviews) {
            console.log('vitalsLibrary.reviews found:', Object.keys(window.vitalsLibrary.reviews));
            
            if (typeof window.vitalsLibrary.reviews.openModal === 'function') {
              window.vitalsLibrary.reviews.openModal(productId);
              console.log('Triggered via vitalsLibrary.reviews.openModal');
              return;
            }
            if (typeof window.vitalsLibrary.reviews.showWriteForm === 'function') {
              window.vitalsLibrary.reviews.showWriteForm(productId);
              console.log('Triggered via vitalsLibrary.reviews.showWriteForm');
              return;
            }
          }
          
          if (typeof window.vitalsLibrary.openReviewForm === 'function') {
            window.vitalsLibrary.openReviewForm(productId);
            console.log('Triggered via vitalsLibrary.openReviewForm');
            return;
          }
          
        } catch (e) {
          console.log('Error calling vitalsLibrary methods:', e);
        }
      }
      
      // Try lowercase vitals as fallback
      if (window.Vitals) {
        console.log('Vitals (lowercase) object found for fallback');
        try {
          if (window.Vitals.reviews && typeof window.Vitals.reviews.openForm === 'function') {
            window.Vitals.reviews.openForm(productId);
            console.log('Triggered via Vitals.reviews.openForm');
            return;
          }
        } catch (e) {
          console.log('Error calling lowercase Vitals methods:', e);
        }
      }
      
      // Method 3: Try to initialize Vitals review widget manually
      try {
        // Some Vitals installations use a global function
        if (typeof window.vitalsOpenReviewForm === 'function') {
          window.vitalsOpenReviewForm(productId);
          console.log('Triggered via global vitalsOpenReviewForm');
          return;
        }
        
        // Try jQuery-based Vitals triggers (common pattern)
        if (window.jQuery && window.jQuery.fn.vitalsReviews) {
          window.jQuery(document).trigger('vitals:openReviewForm', [productId]);
          console.log('Triggered via jQuery vitals event');
          return;
        }
      } catch (e) {
        console.log('Error with manual Vitals initialization:', e);
      }
      
      // Method 4: Look in the Vitals carousel area for hidden buttons
      var carousel = document.querySelector('[class*="vitals"][class*="carousel"], [id*="vitals"][id*="reviews"]');
      if (carousel) {
        var hiddenButtons = carousel.querySelectorAll('button[style*="display: none"], button[hidden], .vitals-hidden button');
        for (var j = 0; j < hiddenButtons.length; j++) {
          console.log('Trying hidden button:', hiddenButtons[j]);
          hiddenButtons[j].click();
          return;
        }
      }
      
      // Method 5: Final logging and guidance
      setTimeout(function() {
        console.log('No Vitals review trigger found');
        console.log('Available Vitals objects:', Object.keys(window).filter(k => k.toLowerCase().includes('vital')));
        console.log('VITALS object structure:', window.VITALS ? Object.keys(window.VITALS) : 'not available');
        console.log('vitalsLibrary object structure:', window.vitalsLibrary ? Object.keys(window.vitalsLibrary) : 'not available');
        
        // Log helpful guidance instead of showing alert
        console.log('=== VITALS REVIEW TROUBLESHOOTING ===');
        console.log('1. Check if there\'s a "Write Review" button in the product description area');
        console.log('2. Look for review options below the product images');
        console.log('3. Scroll to the bottom of the page for review sections');
        console.log('4. Check if Vitals reviews are enabled in your store settings');
        console.log('=====================================');
      }, 100);
    }
    
    // Initialize and check for Vitals content
    document.addEventListener('DOMContentLoaded', function() {
      var fallback = document.querySelector('.vitals-reviews-fallback');
      var vitalsContainer = document.querySelector('#vitals-reviews-{{ product.id }}');
      var writeReviewContainer = document.querySelector('#vitals-write-review-{{ product.id }}');
      
      // Function to check if Vitals has loaded content
      function checkVitalsContent() {
        var hasVitalsContent = false;
        
        // Check for Vitals-injected content
        if (vitalsContainer && vitalsContainer.children.length > 0) {
          hasVitalsContent = true;
        }
        if (writeReviewContainer && writeReviewContainer.children.length > 0) {
          hasVitalsContent = true;
        }
        
        // Check for any element with Vitals-specific classes or attributes
        var vitalsElements = document.querySelectorAll('[data-vitals], .vitals-widget, .vitals-reviews-widget-loaded');
        if (vitalsElements.length > 0) {
          hasVitalsContent = true;
        }
        
        // Hide fallback if Vitals content is found
        if (hasVitalsContent && fallback) {
          fallback.style.display = 'none';
        }
        
        return hasVitalsContent;
      }
      
      // Check immediately and then periodically
      checkVitalsContent();
      setTimeout(checkVitalsContent, 2000);
      setTimeout(checkVitalsContent, 5000);
      
      // Listen for Vitals-specific events
      document.addEventListener('vitals:loaded', checkVitalsContent);
      document.addEventListener('vitals:reviews:loaded', checkVitalsContent);
    });
  </script>

{%- else -%}
  {%- comment -%} Error state - no product provided {%- endcomment -%}
  <div class="vitals-reviews-error" style="padding: 2rem; text-align: center; background: #f8d7da; border: 1px solid #f5c6cb; border-radius: 8px;">
    <h4 style="color: #721c24; margin-bottom: 0.5rem;">Unable to Load Reviews</h4>
    <p style="color: #721c24; margin: 0;">No product specified for reviews display.</p>
  </div>
{%- endif -%}